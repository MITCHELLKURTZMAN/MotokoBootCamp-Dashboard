type TestResults = 
 record {
   day1: text;
   day2: text;
   day3: text;
   day4: text;
   day5: text;
 };
type Team = 
 record {
   score: nat;
   teamId: text;
   teamMembers: vec text;
 };
type Student = 
 record {
   canisterIds: vec text;
   completedDays: vec DailyProject;
   name: text;
   principalId: text;
   rank: text;
   score: nat;
   strikes: int;
   teamId: text;
 };
type Result_4 = 
 variant {
   err: text;
   ok: vec text;
 };
type Result_3 = 
 variant {
   err: text;
   ok: vec Student;
 };
type Result_2 = 
 variant {
   err: text;
   ok: Student;
 };
type Result_1 = 
 variant {
   err: text;
   ok: Team;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type DailyProject = 
 record {
   canisterId: text;
   completed: bool;
   day: nat;
   timeStamp: nat64;
 };
type Activity = 
 record {
   activity: text;
   activityId: text;
   specialAnnouncement: text;
 };
service : {
  buildStudent: (text) -> (Result_2) query;
  buildTeam: (text) -> (Result_1) query;
  getActivity: (nat, nat) -> (vec Activity) query;
  getAdmins: () -> (Result_4) query;
  getStudent: (text) -> (Result_2);
  getStudentsFromTeam: (text) -> (Result_3);
  getTeam: (text) -> (Result_1);
  isEvenTest: (int) -> (bool) query;
  registerAdmin: (text) -> (Result);
  registerStudent: (text) -> (Result_2);
  registerTeamMembers: (vec text, bool, text) -> (Result_1);
  unregisterAdmin: (text) -> (Result);
  verifyProject: (text, nat) -> (TestResults);
}
