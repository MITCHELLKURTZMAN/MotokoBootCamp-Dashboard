type VerifyProject = 
 variant {
   err:
    variant {
      AlreadyCompleted: text;
      InvalidDay: text;
      NotAController: text;
      NotAStudent: text;
      NotImplemented: text;
      UnexpectedError: text;
      UnexpectedValue: text;
    };
   ok;
 };
type TeamString = 
 record {
   name: text;
   score: text;
   teamMembers: vec text;
 };
type Team = 
 record {
   name: text;
   score: nat;
   teamMembers: vec text;
 };
type Student = 
 record {
   canisterIds: vec text;
   cliPrincipalId: text;
   completedDays: vec DailyProject;
   name: text;
   principalId: text;
   rank: text;
   score: nat;
   strikes: int;
   teamName: text;
 };
type Result_7 = 
 variant {
   err: text;
   ok: vec record {
             text;
             text;
           };
 };
type Result_6 = 
 variant {
   err: text;
   ok: text;
 };
type Result_5 = 
 variant {
   err: text;
   ok: vec text;
 };
type Result_4 = 
 variant {
   err: text;
   ok: vec DailyProjectText;
 };
type Result_3 = 
 variant {
   err: text;
   ok: vec Student;
 };
type Result_2 = 
 variant {
   err: text;
   ok: Student;
 };
type Result_1 = 
 variant {
   err: text;
   ok: Team;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type DailyProjectText = 
 record {
   canisterId: text;
   completed: text;
   day: text;
   timeStamp: text;
 };
type DailyProject = 
 record {
   canisterId: text;
   completed: bool;
   day: nat;
   timeStamp: nat64;
 };
type Activity = 
 record {
   activity: text;
   activityId: text;
   specialAnnouncement: text;
 };
service : {
  adminCreateTeam: (text) -> (Result_1);
  adminDeleteTeam: (text) -> (Result_6);
  adminGetAllTeamsWithTeamId: () -> (Result_7);
  adminSyncTeamScores: () -> (Result_6);
  buildStudent: (text) -> (Result_2) query;
  buildTeam: (text) -> (Team) query;
  getActivity: (nat, nat) -> (vec Activity) query;
  getActivityFeed: () -> (vec Activity) query;
  getAdmins: () -> (Result_5) query;
  getAllStudents: () -> (Result_5);
  getAllStudentsPrincipal: () -> (vec principal);
  getAllTeams: () -> (vec TeamString) query;
  getStudent: (text) -> (Result_2);
  getStudentCompletedDays: () -> (Result_4);
  getStudentsFromTeam: (text) -> (Result_3);
  getTeam: (text) -> (Team);
  getTotalProjectsCompleted: () -> (text) query;
  getTotalStudents: () -> (text) query;
  getTotalTeams: () -> (text) query;
  getUser: () -> (Result_2);
  isEvenTest: (int) -> (bool) query;
  isStudent: (text) -> (bool) query;
  registerAdmin: (text) -> (Result);
  registerStudent: (text, text, text) -> (Result_2);
  registerTeamMembers: (vec text, text) -> (Result_1);
  sanityCheckGetEmptyStudent: (text) -> (text);
  unregisterAdmin: (text) -> (Result);
  verifyProject: (text, nat) -> (VerifyProject);
}
